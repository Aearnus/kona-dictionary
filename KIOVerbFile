I/O Verbs 0: 1: 2: 3: 4: 5: 6:

Disk
0: dyadic   write text file `f 0: "hello" 
0: monadic  read text file  0: `f
1: dyadic   write binary file `f 1: 4 5 6 
1: monadic  read binary file  1: `f (mmapped)
2: monadic  read binary file  2: `f (copied to memory)
3: dyadic   append to binary file, w/o sync `f 3: ,7
5: dyadic   append to binary file `f 5: ,7
6: dyadic   write raw byte string `f 6: "\01\02\03"
6: monadic  read raw byte string  6: `f

Network
Start k listening for IPC on port 1234  ./k -i 1234
3: monadic  open handle    h: 3:(`"192.168.1.101";1234) 
3: monadic  close handle   3: h 
            exec .m.c expression
3: dyadic   asynchronous send, returns _n      h 3: "a:2"
            calls monadic .m.s msg handler
4: dyadic   synchronous send, returns result   h 4: "1+1"
            calls monadic .m.g msg handler

Other
0: dyadic   write to console `0: "hello\n" 
2: dyadic   dynamically load C function  a:`libfile 2:(`func,3); a[1;2;3]
4: monadic  type of data [-4,7],  4: "c" /returns 3
5: monadic  printed representation. 5:1 2 3 /returns "1 2 3"

0: and 1: both have versions for reading fields
In all cases `f can instead be (`f;start;length)
Read fixed-width fields: "cbsijfd IFCSDTZMm" (" " is ignore)
(types;widths)0:`f    ("IFC";3 5 4)0:`f  /read rows like "20 30.1 golf\n" 
(types;widths)1:`f 
"c" 1:`f for c in "cid", read bytes/ints/doubles
Load delimited text file (no column names):
(types;delim)0:`f    
Load delimited text file (with column names):
(types;,delim)0:`f   
c 1-byte char, b 1-byte int, s 2-byte int, i 4-byte int, f 4-byte float,
d 8-byte double, " " 1-byte skip, I int, F float, C string, S string (sym), DTZMm Y? 
    